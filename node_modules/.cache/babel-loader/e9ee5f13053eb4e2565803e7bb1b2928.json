{"ast":null,"code":"import KeyCode from 'keycode-js';\nimport { compose, withState, withHandlers } from 'recompose';\nexport default compose(withState('value', 'setValue', props => {\n  console.log('got props', props);\n  return props.value || '';\n}), withHandlers({\n  handleKeyUp: ({\n    addNew,\n    setValue\n  }) => e => {\n    const text = e.target.value.trim();\n\n    if (e.keyCode === KeyCode.KEY_RETURN && text) {\n      addNew(text);\n      setValue('');\n    }\n  },\n  handleChange: ({\n    setValue\n  }) => e => {\n    setValue(e.target.value);\n  }\n}));","map":{"version":3,"sources":["/Users/shreyapatel/Desktop/react-todo-app/src/components/hoc/wrapInputBox.js"],"names":["KeyCode","compose","withState","withHandlers","props","console","log","value","handleKeyUp","addNew","setValue","e","text","target","trim","keyCode","KEY_RETURN","handleChange"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,YAApB;AACA,SAASC,OAAT,EAAkBC,SAAlB,EAA6BC,YAA7B,QAAiD,WAAjD;AAEA,eAAeF,OAAO,CAClBC,SAAS,CAAC,OAAD,EAAU,UAAV,EAAsBE,KAAK,IAAI;AACpCC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,KAAzB;AACA,SAAOA,KAAK,CAACG,KAAN,IAAe,EAAtB;AACH,CAHQ,CADS,EAKlBJ,YAAY,CAAC;AACTK,EAAAA,WAAW,EAAE,CAAC;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAD,KAA0BC,CAAC,IAAI;AACxC,UAAMC,IAAI,GAAGD,CAAC,CAACE,MAAF,CAASN,KAAT,CAAeO,IAAf,EAAb;;AAEA,QAAIH,CAAC,CAACI,OAAF,KAAcf,OAAO,CAACgB,UAAtB,IAAoCJ,IAAxC,EAA8C;AAC1CH,MAAAA,MAAM,CAACG,IAAD,CAAN;AACAF,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACH;AACJ,GARQ;AASTO,EAAAA,YAAY,EAAE,CAAC;AAAEP,IAAAA;AAAF,GAAD,KAAkBC,CAAC,IAAI;AACjCD,IAAAA,QAAQ,CAACC,CAAC,CAACE,MAAF,CAASN,KAAV,CAAR;AACH;AAXQ,CAAD,CALM,CAAtB","sourcesContent":["import KeyCode from 'keycode-js';\nimport { compose, withState, withHandlers } from 'recompose';\n\nexport default compose(\n    withState('value', 'setValue', props => {\n        console.log('got props', props);\n        return props.value || ''\n    }),\n    withHandlers({\n        handleKeyUp: ({ addNew, setValue }) => e => {\n            const text = e.target.value.trim();\n\n            if (e.keyCode === KeyCode.KEY_RETURN && text) {\n                addNew(text);\n                setValue('');\n            }\n        },\n        handleChange: ({ setValue }) => e => {\n            setValue(e.target.value);\n        }\n    })\n);\n"]},"metadata":{},"sourceType":"module"}